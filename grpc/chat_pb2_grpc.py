# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_pb2 as chat__pb2


class ChatStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SignInExisting = channel.unary_unary(
                '/Chat/SignInExisting',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Unreads.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/Chat/AddUser',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Unreads.FromString,
                )
        self.Send = channel.unary_unary(
                '/Chat/Send',
                request_serializer=chat__pb2.SendRequest.SerializeToString,
                response_deserializer=chat__pb2.Payload.FromString,
                )
        self.Listen = channel.unary_stream(
                '/Chat/Listen',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.EncryptedPayload.FromString,
                )
        self.List = channel.unary_unary(
                '/Chat/List',
                request_serializer=chat__pb2.Payload.SerializeToString,
                response_deserializer=chat__pb2.Payload.FromString,
                )
        self.Logout = channel.unary_unary(
                '/Chat/Logout',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Payload.FromString,
                )
        self.Delete = channel.unary_unary(
                '/Chat/Delete',
                request_serializer=chat__pb2.Username.SerializeToString,
                response_deserializer=chat__pb2.Payload.FromString,
                )
        self.Heartbeats = channel.stream_stream(
                '/Chat/Heartbeats',
                request_serializer=chat__pb2.KeepAliveRequest.SerializeToString,
                response_deserializer=chat__pb2.KeepAliveResponse.FromString,
                )
        self.BackupOps = channel.unary_stream(
                '/Chat/BackupOps',
                request_serializer=chat__pb2.KeepAliveRequest.SerializeToString,
                response_deserializer=chat__pb2.Operation.FromString,
                )


class ChatServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SignInExisting(self, request, context):
        """Signs in existing user and gets unread messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Signs in new user and gets unread messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Sends message to recipient with Username
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request, context):
        """Response stream for client to receive messages from server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Lists all usernames that match the optional text wildcard
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Logs out user and returns a confirmation response message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Deletes user and returns a confirmation response message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeats(self, request_iterator, context):
        """Periodic messages from primary server to each backup server to 
        determine if primary server or backup servers have failed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BackupOps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SignInExisting': grpc.unary_unary_rpc_method_handler(
                    servicer.SignInExisting,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Unreads.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Unreads.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=chat__pb2.SendRequest.FromString,
                    response_serializer=chat__pb2.Payload.SerializeToString,
            ),
            'Listen': grpc.unary_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.EncryptedPayload.SerializeToString,
            ),
            'List': grpc.unary_unary_rpc_method_handler(
                    servicer.List,
                    request_deserializer=chat__pb2.Payload.FromString,
                    response_serializer=chat__pb2.Payload.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Payload.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=chat__pb2.Username.FromString,
                    response_serializer=chat__pb2.Payload.SerializeToString,
            ),
            'Heartbeats': grpc.stream_stream_rpc_method_handler(
                    servicer.Heartbeats,
                    request_deserializer=chat__pb2.KeepAliveRequest.FromString,
                    response_serializer=chat__pb2.KeepAliveResponse.SerializeToString,
            ),
            'BackupOps': grpc.unary_stream_rpc_method_handler(
                    servicer.BackupOps,
                    request_deserializer=chat__pb2.KeepAliveRequest.FromString,
                    response_serializer=chat__pb2.Operation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Chat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chat(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SignInExisting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chat/SignInExisting',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Unreads.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chat/AddUser',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Unreads.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chat/Send',
            chat__pb2.SendRequest.SerializeToString,
            chat__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Listen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Chat/Listen',
            chat__pb2.Username.SerializeToString,
            chat__pb2.EncryptedPayload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chat/List',
            chat__pb2.Payload.SerializeToString,
            chat__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chat/Logout',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Chat/Delete',
            chat__pb2.Username.SerializeToString,
            chat__pb2.Payload.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeats(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Chat/Heartbeats',
            chat__pb2.KeepAliveRequest.SerializeToString,
            chat__pb2.KeepAliveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BackupOps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Chat/BackupOps',
            chat__pb2.KeepAliveRequest.SerializeToString,
            chat__pb2.Operation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
