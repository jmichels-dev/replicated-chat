// python -m grpc_tools.protoc --proto_path=/Users/joshuamichels/Documents/CS105/encrypted-chat/grpc/protos --python_out=. --pyi_out=. --grpc_python_out=. /Users/joshuamichels/Documents/CS105/encrypted-chat/grpc/protos/chat.proto

syntax = "proto3";

service Chat {
    // Signs in existing user and gets unread messages
    rpc SignInExisting(Username) returns (Unreads) {}
    // Signs in new user and gets unread messages
    rpc AddUser(Username) returns (Unreads) {}
    // Sends message to recipient with Username
    rpc Send(SendRequest) returns (Payload) {}
    // Response stream for client to receive messages from server
    rpc Listen(Username) returns (stream EncryptedPayload) {}
    // Lists all usernames that match the optional text wildcard
    rpc List(Payload) returns (Payload) {}
    // Logs out user and returns a confirmation response message
    rpc Logout(Username) returns (Payload) {}
    // Deletes user and returns a confirmation response message
    rpc Delete(Username) returns (Payload) {}

    // Periodic messages from primary server to each backup server to 
    // determine if primary server or backup servers have failed
    rpc Heartbeats(stream KeepAliveRequest) returns (stream KeepAliveResponse) {}

    rpc BackupOps(KeepAliveRequest) returns (stream Operation) {}
}

message Username {
    string name = 1;
}

// If errorFlag == 1, unreads is an error message. 
// Else, unreads is a list of unread messages.
message Unreads {
    bool errorFlag = 1;
    string unreads = 2;
    repeated string privateKey = 3;
    repeated bytes encryptedMsg = 4;
    repeated string senders = 5; 
}

// If sent from the sender's client to the server, Payload is a message to send.
// If sent from server to sender, Payload is sent confirmation.
// If sent from server to recipient, Payload is sent message. 
// Can also be error message or logout/delete confirmation.
message Payload {
    string msg = 1;
}

// For sending encrypted messages
message EncryptedPayload {
    string sender = 1;
    bytes encryptedMsg = 2;
}

message SendRequest {
    Username sender = 1;
    Username recipient = 2;
    Payload sentMsg = 3;
}

// Periodic Alive requests and responses 
// between primary server and backup servers
message KeepAliveRequest {
    int32 backup_id = 1;
}

message KeepAliveResponse {
    int32 primary_id = 1;
    repeated int32 backup_ids = 2;
    // bytes snapshot = 3;
}

message Operation {
    repeated string opLst = 1;
}
